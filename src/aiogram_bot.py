from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import os
import asyncio
from database import SessionLocal
from models import TelegramUser, UserMedia, MediaType
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_about_me = State()
    waiting_for_looking_for = State()
    waiting_for_media = State()

def get_profile_keyboard():
    keyboard = [[types.KeyboardButton(text="–ú–æ—è –∞–Ω–∫–µ—Ç–∞")]]
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_profile_actions_keyboard():
    keyboard = [
        [
            types.KeyboardButton(text="1"),
            types.KeyboardButton(text="2")
        ]
    ]
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_done_keyboard():
    keyboard = [[types.KeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ")]]
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

PROFILE_ACTIONS_MESSAGE = """–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ
2. –£–¥–∞–ª–∏—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É"""

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    db = SessionLocal()
    user = db.query(TelegramUser).filter(TelegramUser.telegram_id == message.from_user.id).first()
    
    if user:
        await message.reply("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–æ—è –∞–Ω–∫–µ—Ç–∞' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.", 
                          reply_markup=get_profile_keyboard())
    else:
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
        await state.set_state(RegistrationStates.waiting_for_name)
    db.close()

@dp.message(RegistrationStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(RegistrationStates.waiting_for_age)
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):")

@dp.message(RegistrationStates.waiting_for_age)
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or not (18 <= int(message.text) <= 100):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100):")
        return
    
    await state.update_data(age=int(message.text))
    await state.set_state(RegistrationStates.waiting_for_about_me)
    await message.reply("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:")

@dp.message(RegistrationStates.waiting_for_about_me)
async def process_about_me(message: types.Message, state: FSMContext):
    await state.update_data(about_me=message.text)
    await state.set_state(RegistrationStates.waiting_for_looking_for)
    await message.reply("–û–ø–∏—à–∏—Ç–µ, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –Ω–∞–π—Ç–∏:")

@dp.message(RegistrationStates.waiting_for_looking_for)
async def process_looking_for(message: types.Message, state: FSMContext):
    await state.update_data(looking_for=message.text)
    await state.set_state(RegistrationStates.waiting_for_media)
    await message.reply(
        "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –∫ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–µ.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –æ—á–µ—Ä–µ–¥–∏, "
        "–∏–ª–∏ –æ–¥–Ω–æ –≤–∏–¥–µ–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ /done"
    )

@dp.message(RegistrationStates.waiting_for_media)
async def process_media(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    db = SessionLocal()
    user = db.query(TelegramUser).filter(TelegramUser.telegram_id == message.from_user.id).first()
    
    if not user:
        user = TelegramUser(
            telegram_id=message.from_user.id,
            name=user_data['name'],
            age=user_data['age'],
            about_me=user_data['about_me'],
            looking_for=user_data['looking_for']
        )
        db.add(user)
        db.flush()
    
    if message.photo:
        media = UserMedia(
            user_id=user.id,
            file_id=message.photo[-1].file_id,
            media_type=MediaType.PHOTO
        )
        db.add(media)
        db.commit()
        await message.reply(
            "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ì–æ—Ç–æ–≤–æ ‚úÖ'.",
            reply_markup=get_done_keyboard()
        )
    elif message.video:
        if user.media_files:
            await message.reply(
                "–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            )
            db.close()
            return
            
        media = UserMedia(
            user_id=user.id,
            file_id=message.video.file_id,
            media_type=MediaType.VIDEO
        )
        db.add(media)
        db.commit()
        await state.clear()
        await message.reply(
            "–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.",
            reply_markup=get_profile_keyboard()
        )
    elif message.text == "–ì–æ—Ç–æ–≤–æ ‚úÖ" or message.text == "/done":
        if not user.media_files:
            await message.reply(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª."
            )
            db.close()
            return
            
        db.commit()
        await state.clear()
        await message.reply(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É.",
            reply_markup=get_profile_keyboard()
        )
    else:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. "
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ /done"
        )
    
    db.close()

@dp.message(F.text == "–ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def show_profile(message: types.Message):
    db = SessionLocal()
    user = db.query(TelegramUser).filter(TelegramUser.telegram_id == message.from_user.id).first()
    
    if user:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.reply("–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        profile_text = f"""{user.name}, {user.age} - {user.about_me}

–í –ø–æ–∏—Å–∫–∞—Ö:
{user.looking_for}"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∞–Ω–∫–µ—Ç—ã
        if user.media_files:
            if user.media_files[0].media_type == MediaType.VIDEO:
                await message.answer_video(user.media_files[0].file_id, caption=profile_text)
            else:
                media_group = []
                for i, media in enumerate(user.media_files):
                    if media.media_type == MediaType.PHOTO:
                        input_media = types.InputMediaPhoto(
                            media=media.file_id,
                            caption=profile_text if i == 0 else None
                        )
                        media_group.append(input_media)
                
                await message.answer_media_group(media_group)
        else:
            # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ÇÔøΩÔøΩ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(profile_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        await message.answer(PROFILE_ACTIONS_MESSAGE, 
                           reply_markup=get_profile_actions_keyboard())
    else:
        await message.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                          reply_markup=get_profile_keyboard())
    db.close()

@dp.message(F.text == "1")
async def refill_profile(message: types.Message, state: FSMContext):
    db = SessionLocal()
    user = db.query(TelegramUser).filter(TelegramUser.telegram_id == message.from_user.id).first()
    if user:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∑–∞–Ω–æ–≤–æ:", 
                          reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(RegistrationStates.waiting_for_name)
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        db.delete(user)
        db.commit()
    db.close()

@dp.message(F.text == "2")
async def delete_profile(message: types.Message):
    db = SessionLocal()
    user = db.query(TelegramUser).filter(TelegramUser.telegram_id == message.from_user.id).first()
    if user:
        db.delete(user)
        db.commit()
        await message.reply("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π.",
                          reply_markup=get_profile_keyboard())
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.",
                          reply_markup=get_profile_keyboard())
    db.close()

async def set_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [types.BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")]
    await bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await set_commands()
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")